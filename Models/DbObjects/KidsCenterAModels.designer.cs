#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KidsCenterA.Models.DbObjects
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="KidsCenterA")]
	public partial class KidsCenterAModelsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgeCategory(AgeCategory instance);
    partial void UpdateAgeCategory(AgeCategory instance);
    partial void DeleteAgeCategory(AgeCategory instance);
    partial void InsertChildren(Children instance);
    partial void UpdateChildren(Children instance);
    partial void DeleteChildren(Children instance);
    partial void InsertCourseCategory(CourseCategory instance);
    partial void UpdateCourseCategory(CourseCategory instance);
    partial void DeleteCourseCategory(CourseCategory instance);
    partial void InsertCourseMembership(CourseMembership instance);
    partial void UpdateCourseMembership(CourseMembership instance);
    partial void DeleteCourseMembership(CourseMembership instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertTrainer(Trainer instance);
    partial void UpdateTrainer(Trainer instance);
    partial void DeleteTrainer(Trainer instance);
    #endregion
		
		public KidsCenterAModelsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["KidsCenterAConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KidsCenterAModelsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KidsCenterAModelsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KidsCenterAModelsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KidsCenterAModelsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AgeCategory> AgeCategories
		{
			get
			{
				return this.GetTable<AgeCategory>();
			}
		}
		
		public System.Data.Linq.Table<Children> Childrens
		{
			get
			{
				return this.GetTable<Children>();
			}
		}
		
		public System.Data.Linq.Table<CourseCategory> CourseCategories
		{
			get
			{
				return this.GetTable<CourseCategory>();
			}
		}
		
		public System.Data.Linq.Table<CourseMembership> CourseMemberships
		{
			get
			{
				return this.GetTable<CourseMembership>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Trainer> Trainers
		{
			get
			{
				return this.GetTable<Trainer>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AgeCategory")]
	public partial class AgeCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AgeCategoryId;
		
		private string _AgeCategoryName;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgeCategoryIdChanging(int value);
    partial void OnAgeCategoryIdChanged();
    partial void OnAgeCategoryNameChanging(string value);
    partial void OnAgeCategoryNameChanged();
    #endregion
		
		public AgeCategory()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeCategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AgeCategoryId
		{
			get
			{
				return this._AgeCategoryId;
			}
			set
			{
				if ((this._AgeCategoryId != value))
				{
					this.OnAgeCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._AgeCategoryId = value;
					this.SendPropertyChanged("AgeCategoryId");
					this.OnAgeCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeCategoryName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string AgeCategoryName
		{
			get
			{
				return this._AgeCategoryName;
			}
			set
			{
				if ((this._AgeCategoryName != value))
				{
					this.OnAgeCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._AgeCategoryName = value;
					this.SendPropertyChanged("AgeCategoryName");
					this.OnAgeCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgeCategory_Course", Storage="_Courses", ThisKey="AgeCategoryId", OtherKey="AgeCategoryId")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.AgeCategory = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.AgeCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Children")]
	public partial class Children : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ChildId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _Age;
		
		private string _PhoneNo;
		
		private string _Email;
		
		private EntitySet<CourseMembership> _CourseMemberships;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChildIdChanging(int value);
    partial void OnChildIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnPhoneNoChanging(string value);
    partial void OnPhoneNoChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Children()
		{
			this._CourseMemberships = new EntitySet<CourseMembership>(new Action<CourseMembership>(this.attach_CourseMemberships), new Action<CourseMembership>(this.detach_CourseMemberships));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ChildId
		{
			get
			{
				return this._ChildId;
			}
			set
			{
				if ((this._ChildId != value))
				{
					this.OnChildIdChanging(value);
					this.SendPropertyChanging();
					this._ChildId = value;
					this.SendPropertyChanged("ChildId");
					this.OnChildIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNo", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string PhoneNo
		{
			get
			{
				return this._PhoneNo;
			}
			set
			{
				if ((this._PhoneNo != value))
				{
					this.OnPhoneNoChanging(value);
					this.SendPropertyChanging();
					this._PhoneNo = value;
					this.SendPropertyChanged("PhoneNo");
					this.OnPhoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(25)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Children_CourseMembership", Storage="_CourseMemberships", ThisKey="ChildId", OtherKey="ChildId")]
		public EntitySet<CourseMembership> CourseMemberships
		{
			get
			{
				return this._CourseMemberships;
			}
			set
			{
				this._CourseMemberships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseMemberships(CourseMembership entity)
		{
			this.SendPropertyChanging();
			entity.Children = this;
		}
		
		private void detach_CourseMemberships(CourseMembership entity)
		{
			this.SendPropertyChanging();
			entity.Children = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseCategory")]
	public partial class CourseCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseCategoryId;
		
		private string _CourseCategoryName;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseCategoryIdChanging(int value);
    partial void OnCourseCategoryIdChanged();
    partial void OnCourseCategoryNameChanging(string value);
    partial void OnCourseCategoryNameChanged();
    #endregion
		
		public CourseCategory()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseCategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseCategoryId
		{
			get
			{
				return this._CourseCategoryId;
			}
			set
			{
				if ((this._CourseCategoryId != value))
				{
					this.OnCourseCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CourseCategoryId = value;
					this.SendPropertyChanged("CourseCategoryId");
					this.OnCourseCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseCategoryName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string CourseCategoryName
		{
			get
			{
				return this._CourseCategoryName;
			}
			set
			{
				if ((this._CourseCategoryName != value))
				{
					this.OnCourseCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CourseCategoryName = value;
					this.SendPropertyChanged("CourseCategoryName");
					this.OnCourseCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseCategory_Course", Storage="_Courses", ThisKey="CourseCategoryId", OtherKey="CourseCategoryId")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.CourseCategory = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.CourseCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseMembership")]
	public partial class CourseMembership : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MembershipId;
		
		private int _CourseId;
		
		private int _ChildId;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private EntityRef<Children> _Children;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMembershipIdChanging(int value);
    partial void OnMembershipIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnChildIdChanging(int value);
    partial void OnChildIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    #endregion
		
		public CourseMembership()
		{
			this._Children = default(EntityRef<Children>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembershipId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MembershipId
		{
			get
			{
				return this._MembershipId;
			}
			set
			{
				if ((this._MembershipId != value))
				{
					this.OnMembershipIdChanging(value);
					this.SendPropertyChanging();
					this._MembershipId = value;
					this.SendPropertyChanged("MembershipId");
					this.OnMembershipIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildId", DbType="Int NOT NULL")]
		public int ChildId
		{
			get
			{
				return this._ChildId;
			}
			set
			{
				if ((this._ChildId != value))
				{
					if (this._Children.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildIdChanging(value);
					this.SendPropertyChanging();
					this._ChildId = value;
					this.SendPropertyChanged("ChildId");
					this.OnChildIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Children_CourseMembership", Storage="_Children", ThisKey="ChildId", OtherKey="ChildId", IsForeignKey=true)]
		public Children Children
		{
			get
			{
				return this._Children.Entity;
			}
			set
			{
				Children previousValue = this._Children.Entity;
				if (((previousValue != value) 
							|| (this._Children.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Children.Entity = null;
						previousValue.CourseMemberships.Remove(this);
					}
					this._Children.Entity = value;
					if ((value != null))
					{
						value.CourseMemberships.Add(this);
						this._ChildId = value.ChildId;
					}
					else
					{
						this._ChildId = default(int);
					}
					this.SendPropertyChanged("Children");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseMembership", Storage="_Course", ThisKey="CourseId", OtherKey="CourseId", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseMemberships.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseMemberships.Add(this);
						this._CourseId = value.CourseId;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseId;
		
		private int _CourseCategoryId;
		
		private int _AgeCategoryId;
		
		private int _CoursePrice;
		
		private int _TrainerId;
		
		private EntitySet<CourseMembership> _CourseMemberships;
		
		private EntityRef<AgeCategory> _AgeCategory;
		
		private EntityRef<CourseCategory> _CourseCategory;
		
		private EntityRef<Trainer> _Trainer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnCourseCategoryIdChanging(int value);
    partial void OnCourseCategoryIdChanged();
    partial void OnAgeCategoryIdChanging(int value);
    partial void OnAgeCategoryIdChanged();
    partial void OnCoursePriceChanging(int value);
    partial void OnCoursePriceChanged();
    partial void OnTrainerIdChanging(int value);
    partial void OnTrainerIdChanged();
    #endregion
		
		public Course()
		{
			this._CourseMemberships = new EntitySet<CourseMembership>(new Action<CourseMembership>(this.attach_CourseMemberships), new Action<CourseMembership>(this.detach_CourseMemberships));
			this._AgeCategory = default(EntityRef<AgeCategory>);
			this._CourseCategory = default(EntityRef<CourseCategory>);
			this._Trainer = default(EntityRef<Trainer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseCategoryId", DbType="Int NOT NULL")]
		public int CourseCategoryId
		{
			get
			{
				return this._CourseCategoryId;
			}
			set
			{
				if ((this._CourseCategoryId != value))
				{
					if (this._CourseCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CourseCategoryId = value;
					this.SendPropertyChanged("CourseCategoryId");
					this.OnCourseCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgeCategoryId", DbType="Int NOT NULL")]
		public int AgeCategoryId
		{
			get
			{
				return this._AgeCategoryId;
			}
			set
			{
				if ((this._AgeCategoryId != value))
				{
					if (this._AgeCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgeCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._AgeCategoryId = value;
					this.SendPropertyChanged("AgeCategoryId");
					this.OnAgeCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoursePrice", DbType="Int NOT NULL")]
		public int CoursePrice
		{
			get
			{
				return this._CoursePrice;
			}
			set
			{
				if ((this._CoursePrice != value))
				{
					this.OnCoursePriceChanging(value);
					this.SendPropertyChanging();
					this._CoursePrice = value;
					this.SendPropertyChanged("CoursePrice");
					this.OnCoursePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainerId", DbType="Int NOT NULL")]
		public int TrainerId
		{
			get
			{
				return this._TrainerId;
			}
			set
			{
				if ((this._TrainerId != value))
				{
					if (this._Trainer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTrainerIdChanging(value);
					this.SendPropertyChanging();
					this._TrainerId = value;
					this.SendPropertyChanged("TrainerId");
					this.OnTrainerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseMembership", Storage="_CourseMemberships", ThisKey="CourseId", OtherKey="CourseId")]
		public EntitySet<CourseMembership> CourseMemberships
		{
			get
			{
				return this._CourseMemberships;
			}
			set
			{
				this._CourseMemberships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AgeCategory_Course", Storage="_AgeCategory", ThisKey="AgeCategoryId", OtherKey="AgeCategoryId", IsForeignKey=true)]
		public AgeCategory AgeCategory
		{
			get
			{
				return this._AgeCategory.Entity;
			}
			set
			{
				AgeCategory previousValue = this._AgeCategory.Entity;
				if (((previousValue != value) 
							|| (this._AgeCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AgeCategory.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._AgeCategory.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._AgeCategoryId = value.AgeCategoryId;
					}
					else
					{
						this._AgeCategoryId = default(int);
					}
					this.SendPropertyChanged("AgeCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseCategory_Course", Storage="_CourseCategory", ThisKey="CourseCategoryId", OtherKey="CourseCategoryId", IsForeignKey=true)]
		public CourseCategory CourseCategory
		{
			get
			{
				return this._CourseCategory.Entity;
			}
			set
			{
				CourseCategory previousValue = this._CourseCategory.Entity;
				if (((previousValue != value) 
							|| (this._CourseCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseCategory.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._CourseCategory.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._CourseCategoryId = value.CourseCategoryId;
					}
					else
					{
						this._CourseCategoryId = default(int);
					}
					this.SendPropertyChanged("CourseCategory");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trainer_Course", Storage="_Trainer", ThisKey="TrainerId", OtherKey="TrainerId", IsForeignKey=true)]
		public Trainer Trainer
		{
			get
			{
				return this._Trainer.Entity;
			}
			set
			{
				Trainer previousValue = this._Trainer.Entity;
				if (((previousValue != value) 
							|| (this._Trainer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trainer.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Trainer.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._TrainerId = value.TrainerId;
					}
					else
					{
						this._TrainerId = default(int);
					}
					this.SendPropertyChanged("Trainer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseMemberships(CourseMembership entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseMemberships(CourseMembership entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trainers")]
	public partial class Trainer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainerId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private string _PhoneNo;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainerIdChanging(int value);
    partial void OnTrainerIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneNoChanging(string value);
    partial void OnPhoneNoChanged();
    #endregion
		
		public Trainer()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainerId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainerId
		{
			get
			{
				return this._TrainerId;
			}
			set
			{
				if ((this._TrainerId != value))
				{
					this.OnTrainerIdChanging(value);
					this.SendPropertyChanging();
					this._TrainerId = value;
					this.SendPropertyChanged("TrainerId");
					this.OnTrainerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNo", DbType="NVarChar(25) NOT NULL", CanBeNull=false)]
		public string PhoneNo
		{
			get
			{
				return this._PhoneNo;
			}
			set
			{
				if ((this._PhoneNo != value))
				{
					this.OnPhoneNoChanging(value);
					this.SendPropertyChanging();
					this._PhoneNo = value;
					this.SendPropertyChanged("PhoneNo");
					this.OnPhoneNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trainer_Course", Storage="_Courses", ThisKey="TrainerId", OtherKey="TrainerId")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Trainer = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Trainer = null;
		}
	}
}
#pragma warning restore 1591
